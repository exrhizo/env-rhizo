#!/Users/exrhizo/env-rhizo/.venv/bin/python
"""
cubehelix [options]

    -n / --levels N          number of discrete colours (default 256)
    --start X                start position, 0..3 wraps the colour wheel
    --rotations X            total R->G->B rotations (negative = clockwise)
    --hue X                  saturation (0 = greyscale)
    --gamma X                intensity emphasis
    --keep-frac F            keep middle F of the ramp, 0 < F <= 1 (default 1)
    -s / --samples M         generate M random variations
    --seed N                 RNG seed for reproducibility
    -f / --format list css preview   restrict outputs
"""
import argparse
import math
import random
from typing import List, Sequence

# -------------------------------------------------------------------
# Core helpers
# -------------------------------------------------------------------
def _rgb_to_hex(r: float, g: float, b: float) -> str:
    return "#{:02X}{:02X}{:02X}".format(int(r * 255), int(g * 255), int(b * 255))

# -------------------------------------------------------------------
# Palette generator
# -------------------------------------------------------------------
def cubehelix_palette(
    n_levels: int,
    start: float,
    rotations: float,
    hue: float,
    gamma: float,
    keep_frac: float,
) -> List[str]:
    """
    Generate a Cubehelix ramp as hex strings.

    keep_frac trims the extremes of the 0..1 lightness axis symmetrically.
    For example, keep_frac = 0.8 maps the nominal range [0,1] to
    [0.1, 0.9] before colour modulation.
    """
    if not 0.0 < keep_frac <= 1.0:
        raise ValueError("keep_frac must be in the range (0, 1]")
    min_clip = (1.0 - keep_frac) / 2.0
    max_clip = 1.0 - min_clip

    out: List[str] = []
    two_pi = 2.0 * math.pi

    for i in range(n_levels):
        t_lin = i / (n_levels - 1)                # 0 .. 1
        t_gamma = t_lin ** gamma
        base = min_clip + t_gamma * (max_clip - min_clip)

        angle = two_pi * (start / 3.0 + 1.0 + rotations * t_lin)
        amp = hue * t_lin * (1.0 - t_lin) / 2.0

        r = base + amp * (-0.14861 * math.cos(angle) + 1.78277 * math.sin(angle))
        g = base + amp * (-0.29227 * math.cos(angle) - 0.90649 * math.sin(angle))
        b = base + amp * ( 1.97294 * math.cos(angle))

        r, g, b = (max(0.0, min(1.0, v)) for v in (r, g, b))
        out.append(_rgb_to_hex(r, g, b))
    return out

def palette_to_css_gradient(palette: List[str]) -> str:
    n = len(palette)
    stops = ", ".join("{} {:.3g}%".format(c, 100 * i / (n - 1))
                      for i, c in enumerate(palette))
    return "linear-gradient(to right, {})".format(stops)

def preview_palette(palette: List[str], block: str = "  ") -> None:
    seq = []
    for hex_code in palette:
        r, g, b = (int(hex_code[i:i + 2], 16) for i in (1, 3, 5))
        seq.append("\x1b[48;2;{};{};{}m{}".format(r, g, b, block))
    seq.append("\x1b[0m")
    print("".join(seq))

# -------------------------------------------------------------------
# CLI plumbing
# -------------------------------------------------------------------
_DEFAULTS = dict(start=0.5, rotations=-1.5, hue=1.0, gamma=1.0)

def _parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser("cubehelix")
    p.add_argument("-n", "--levels", type=int, default=256)
    p.add_argument("--start", type=float)
    p.add_argument("--rotations", type=float)
    p.add_argument("--hue", type=float)
    p.add_argument("--gamma", type=float)
    p.add_argument("--keep-frac", type=float, default=1.0,
                   help="fraction of the ramp to keep (0 < F <= 1)")
    p.add_argument("-s", "--samples", type=int, default=0,
                   help="produce M randomised palettes")
    p.add_argument("--seed", type=int)
    p.add_argument("-f", "--format", choices=("list", "css", "preview"),
                   nargs="+", help="restrict output formats")
    return p.parse_args()

def _rand(lo: float, hi: float) -> float:
    return random.uniform(lo, hi)

def main() -> None:
    args = _parse_args()
    if args.seed is not None:
        random.seed(args.seed)

    formats: Sequence[str] = args.format or ("list", "css", "preview")
    n_runs = max(1, args.samples)

    for idx in range(n_runs):
        rnd = args.samples > 0
        start     = args.start     if args.start     is not None else (_rand(0.0, 3.0)  if rnd else _DEFAULTS["start"])
        rotations = args.rotations if args.rotations is not None else (_rand(-2.5, 2.5) if rnd else _DEFAULTS["rotations"])
        hue       = args.hue       if args.hue       is not None else (_rand(0.0, 2.0)  if rnd else _DEFAULTS["hue"])
        gamma     = args.gamma     if args.gamma     is not None else (_rand(0.5, 1.5)  if rnd else _DEFAULTS["gamma"])

        pal = cubehelix_palette(
            n_levels=args.levels,
            start=start,
            rotations=rotations,
            hue=hue,
            gamma=gamma,
            keep_frac=args.keep_frac,
        )

        label = ("Palette {}: start={:.2f} rot={:.2f} hue={:.2f} "
                 "gamma={:.2f} keep_frac={:.2f}").format(
            idx + 1, start, rotations, hue, gamma, args.keep_frac
        )
        print(label)

        if "list" in formats:
            print("list =", pal)
        if "css" in formats:
            print("css  =", palette_to_css_gradient(pal))
        if "preview" in formats:
            preview_palette(pal)
        print()

if __name__ == "__main__":
    main()
